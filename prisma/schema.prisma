// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

// The ERD generator doesn't work in Vercel pipeline
// To update the ERD, uncomment on local, run and comment out again
// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  // provider = "sqlite"
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model PrayerJournal {
  id         String                @id @default(cuid())
  userId     String
  name       String
  createdAt  DateTime              @default(now())
  archivedAt DateTime?
  cover      PrayerJournalCover?
  owner      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  targets    PrayerTarget[]
  accesses   PrayerJournalAccess[]

  @@index([userId])
}

model PrayerJournalCover {
  journalId String        @unique
  url       String
  color     String
  blurHash  String
  journal   PrayerJournal @relation(fields: [journalId], references: [id], onDelete: Cascade)
}

model PrayerTarget {
  id         String    @id @default(cuid())
  journalId  String
  name       String
  priority   Int       @default(0)
  createdAt  DateTime  @default(now())
  archivedAt DateTime?

  journal  PrayerJournal @relation(fields: [journalId], references: [id], onDelete: Cascade)
  items    PrayerItem[]
  timeline Timeline[]

  @@index([journalId])
}

model PrayerItem {
  id               String       @id @default(cuid())
  targetId         String
  description      String
  priority         Int          @default(0)
  dateBegins       DateTime     @default(now())
  lastPrayed       DateTime?
  dateAccomplished DateTime?
  target           PrayerTarget @relation(fields: [targetId], references: [id], onDelete: Cascade)
  timeline         Timeline[]

  @@index([targetId])
}

model Timeline {
  id       String       @id @default(cuid())
  targetId String
  itemId   String?
  date     DateTime     @default(now())
  type     TimelineType @default(PRAYED)
  note     String?

  target PrayerTarget @relation(fields: [targetId], references: [id], onDelete: Cascade)
  item   PrayerItem?  @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([targetId])
  @@index([itemId])
}

enum TimelineType {
  PRAYED
  NOTE
  ACCOMPLISHED
}

model PrayerJournalAccess {
  journalId String
  userId    String

  journal PrayerJournal @relation(fields: [journalId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([journalId, userId])
  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  journals        PrayerJournal[]
  journalAccesses PrayerJournalAccess[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
